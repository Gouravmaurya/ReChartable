import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { podcastAPI } from '../utils/api';
import { generateSummary, getRelatedVideos } from '../utils/gemini';
import { 
  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer 
} from 'recharts';

// Tab component with modern design
const Tab = ({ active, onClick, children }) => (
  <button
    onClick={onClick}
    className={`px-5 py-2.5  rounded-xl text-sm font-medium transition-all duration-200 ${
      active
        ? 'bg-white/10 text-white shadow-md border-2 border-white transform -translate-y-0.5'
        : 'text-white/70 hover:text-white hover:bg-white/10'
    }`}
  >
    <div className="flex items-center gap-2">
      {children}
    </div>
  </button>
);

// Custom tooltip for charts
const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-white/10 p-3 border border-white/20 rounded shadow-lg">
        <p className="font-semibold">{label}</p>
        {payload.map((entry, index) => (
          <p key={index} style={{ color: entry.color }}>
            {`${entry.name}: ${entry.value}`}
          </p>
        ))}
      </div>
    );
  }
  return null;
};

// Color palette for charts
const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316', '#6366F1', '#8B5CF6'];

// Format numbers for display
const formatNumber = (num) => {
  const number = typeof num === 'string' ? parseInt(num, 10) : num;
  if (isNaN(number)) return '0';
  
  if (number >= 1000000) {
    return (number / 1000000).toFixed(1) + 'M';
  }
  if (number >= 1000) {
    return (number / 1000).toFixed(1) + 'K';
  }
  return number.toString();
};

// Format YouTube duration (ISO 8601 format)
const formatDuration = (duration) => {
  if (!duration) return 'N/A';
  
  const match = duration.match(/PT(\d+H)?(\d+M)?(\d+S)?/);
  if (!match) return duration;
  
  const hours = parseInt(match[1]) || 0;
  const minutes = parseInt(match[2]) || 0;
  const seconds = parseInt(match[3]) || 0;
  
  const parts = [];
  if (hours > 0) parts.push(`${hours}h`);
  if (minutes > 0 || hours > 0) parts.push(`${minutes}m`);
  parts.push(`${seconds}s`);
  
  return parts.join(' ');
};

const Dashboard = () => {
  const { id: urlPodcastId } = useParams();
  const [activeTab, setActiveTab] = useState('overview');
  const [podcastId, setPodcastId] = useState(urlPodcastId || '');
  const [podcastData, setPodcastData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [summary, setSummary] = useState('');
  const [relatedVideos, setRelatedVideos] = useState([]);
  const [generatingSummary, setGeneratingSummary] = useState(false);

  // Tab configuration
  const tabs = [
    { id: 'overview', label: 'Overview' },
    { id: 'analytics', label: 'Analytics' },
    { id: 'audience', label: 'Audience' },
    { id: 'summary', label: 'Summary' }
  ];

  // Prepare analytics data from podcast statistics
  const prepareAnalyticsData = () => {
    if (!podcastData?.statistics) return null;
    
    const { viewCount, likeCount, commentCount, favoriteCount } = podcastData.statistics;
    const views = parseInt(viewCount) || 0;
    const likes = parseInt(likeCount) || 0;
    const comments = parseInt(commentCount) || 0;
    const favorites = parseInt(favoriteCount) || 0;
    
    // Calculate engagement rate (likes + comments / views)
    const engagementRate = views > 0 
      ? ((likes + comments) / views * 100).toFixed(2)
      : 0;

    // Generate time series data (last 7 days)
    const timeSeriesData = Array.from({ length: 7 }, (_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - (6 - i));
      const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
      // Simulate daily views based on total views (for demo)
      const dailyViews = Math.round(views / 7 * (0.8 + Math.random() * 0.4));
      
      return {
        date: dayName,
        views: dailyViews,
        likes: Math.round(likes / 7 * (0.7 + Math.random() * 0.6)),
        comments: Math.round(comments / 7 * (0.5 + Math.random()))
      };
    });

    return {
      timeSeriesData,
      engagementData: [
        { name: 'Likes', value: likes },
        { name: 'Comments', value: comments },
        { name: 'Favorites', value: favorites }
      ],
      engagementRate,
      totalViews: views,
      totalLikes: likes,
      totalComments: comments
    };
  };

  const analyticsData = prepareAnalyticsData();
  const chartData = analyticsData || {
    timeSeriesData: [],
    engagementData: [],
    engagementRate: 0,
    totalViews: 0,
    totalLikes: 0,
    totalComments: 0
  };

  // Device distribution (estimated based on view count)
  const deviceData = [
    { name: 'Mobile', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.6) },
    { name: 'Desktop', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.3) },
    { name: 'Tablet', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.1) },
  ];

  // Platform distribution (estimated)
  const platformData = [
    { name: 'iOS', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.4) },
    { name: 'Android', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.35) },
    { name: 'Web', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.2) },
    { name: 'Other', value: Math.round((podcastData?.statistics?.viewCount || 0) * 0.05) },
  ];

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!podcastId) return;
    
    try {
      setLoading(true);
      const response = await podcastAPI.getPodcastDetails(podcastId);
      
      if (response.data) {
        setPodcastData(response.data);
        toast.success('Podcast data loaded successfully!');
      } else {
        throw new Error('No data returned from the server');
      }
    } catch (error) {
      console.error('Error fetching podcast data:', error);
      setError(error.response?.data?.message || 'Failed to fetch podcast data');
      toast.error('Failed to load podcast data');
    } finally {
      setLoading(false);
    }
  };

  // Handle summary generation
  const handleGenerateSummary = async () => {
    if (!podcastData) return;
    
    try {
      setGeneratingSummary(true);
      const generatedSummary = await generateSummary(
        podcastData.snippet?.title || 'This content',
        podcastData.snippet?.description || '',
        ''
      );
      setSummary(generatedSummary);
    } catch (error) {
      console.error('Error generating summary:', error);
      toast.error('Failed to generate summary. Please try again.');
    } finally {
      setGeneratingSummary(false);
    }
  };

  // Load podcast data when component mounts or when podcastId changes
  useEffect(() => {
    const fetchPodcastData = async () => {
      if (!podcastId) return;
      
      try {
        setLoading(true);
        const response = await podcastAPI.getPodcastDetails(podcastId);
        
        if (response) {
          setPodcastData(response);
          toast.success('Podcast data loaded successfully!');
        }
      } catch (error) {
        console.error('Error fetching podcast data:', error);
        setError(error.response?.data?.message || 'Failed to fetch podcast data');
        toast.error('Failed to load podcast data');
      } finally {
        setLoading(false);
      }
    };
    
    fetchPodcastData();
  }, [podcastId]);

  // Load related videos when podcast data changes
  useEffect(() => {
    const loadRelatedVideos = async () => {
      if (!podcastData) return;
      
      try {
        const videos = await getRelatedVideos(
          podcastData.snippet?.title || '',
          podcastData.snippet?.channelTitle || '',
          podcastData.snippet?.description || ''
        );
        setRelatedVideos(Array.isArray(videos) ? videos : []);
      } catch (error) {
        console.error('Error getting related videos:', error);
        setRelatedVideos([]);
      }
    };
    
    loadRelatedVideos();
  }, [podcastData]);

  // Enhanced StatCard component with modern design
  const StatCard = ({ title, value, icon, trend, trendValue, className = '' }) => (
    <div className={`relative overflow-hidden group ${className}`}>
      {/* Animated background effect */}
      <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl"></div>
      
      <div className="relative z-10">
        <div className="flex items-start justify-between">
          <div>
            <p className="text-sm font-medium text-white/70 dark:text-white/70 mb-1">{title}</p>
            <p className="text-2xl font-bold bg-gradient-to-r from-white to-white bg-clip-text text-transparent">
              {Number(value).toLocaleString()}
            </p>
          </div>
          <div className="p-2 rounded-xl bg-white/10 dark:bg-white/10 backdrop-blur-sm border border-white/20 shadow-sm">
            {icon}
          </div>
        </div>
        {trend && (
          <div className={`mt-3 inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
            trend === 'up' 
              ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' 
              : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'
          }`}>
            {trend === 'up' ? (
              <svg className="w-3.5 h-3.5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
              </svg>
            ) : (
              <svg className="w-3.5 h-3.5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            )}
            {trendValue}
          </div>
        )}
      </div>
    </div>
  );

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Render tab content with enhanced UI
  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-6">
            {/* Podcast Details Card */}
            {podcastData && (
              <div className="bg-black/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-white/20">
                <div className="flex flex-col md:flex-row gap-6">
                  {/* Thumbnail */}
                  <div className="w-full md:w-1/4 lg:w-1/5">
                    <img 
                      src={podcastData.snippet?.thumbnails?.high?.url || 'https://via.placeholder.com/300x200'} 
                      alt={podcastData.snippet?.title || 'Podcast Thumbnail'}
                      className="w-full h-auto rounded-xl shadow-md"
                    />
                  </div>
                  
                  {/* Podcast Info */}
                  <div className="flex-1">
                    <div className="flex flex-col h-full">
                      <div className="flex-1">
                        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                          {podcastData.snippet?.title || 'Untitled Podcast'}
                        </h2>
                        
                        <p className="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                          {podcastData.snippet?.description || 'No description available.'}
                        </p>
                        
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-4">
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Channel</p>
                            <p className="text-gray-900 dark:text-white font-medium">
                              {podcastData.snippet?.channelTitle || 'N/A'}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Published</p>
                            <p className="text-gray-900 dark:text-white font-medium">
                              {formatDate(podcastData.snippet?.publishedAt)}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Duration</p>
                            <p className="text-gray-900 dark:text-white font-medium">
                              {podcastData.contentDetails?.duration 
                                ? formatDuration(podcastData.contentDetails.duration) 
                                : 'N/A'}
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                        <div className="flex flex-wrap gap-2">
                          {podcastData.snippet?.tags?.slice(0, 4).map((tag, index) => (
                            <span 
                              key={index}
                              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Stats Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <StatCard
                title="Total Views"
                value={podcastData.statistics?.viewCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-blue-100 dark:bg-blue-900/30">
                    <svg className="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  </div>
                }
                trend="up"
                trendValue="12.5%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Total Likes"
                value={podcastData.statistics?.likeCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-green-100 dark:bg-green-900/30">
                    <svg className="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                  </div>
                }
                trend="down"
                trendValue="5.2%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Total Comments"
                value={podcastData.statistics?.commentCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-yellow-100 dark:bg-yellow-900/30">
                    <svg className="w-6 h-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                    </svg>
                  </div>
                }
                trend="up"
                trendValue="8.1%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Engagement Rate"
                value={analyticsData?.engagementRate || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-purple-100 dark:bg-purple-900/30">
                    <svg className="w-6 h-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                }
                trend="down"
                trendValue="2.5%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
            </div>
          </div>
      );
      
    case 'analytics':
      return (
          <div className="space-y-6">
            {/* Stats Overview */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <StatCard
                title="Total Views"
                value={podcastData?.statistics?.viewCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-blue-100 dark:bg-blue-900/30">
                    <svg className="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  </div>
                }
                trend="up"
                trendValue="12.5%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Total Likes"
                value={podcastData?.statistics?.likeCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-green-100 dark:bg-green-900/30">
                    <svg className="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                  </div>
                }
                trend="up"
                trendValue="8.3%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Comments"
                value={podcastData?.statistics?.commentCount || '0'}
                icon={
                  <div className="p-2 rounded-xl bg-purple-100 dark:bg-purple-900/30">
                    <svg className="w-6 h-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                    </svg>
                  </div>
                }
                trend="down"
                trendValue="2.1%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
              <StatCard
                title="Engagement Rate"
                value={analyticsData?.engagementRate ? `${Math.round(analyticsData.engagementRate * 100) / 100}%` : '0%'}
                icon={
                  <div className="p-2 rounded-xl bg-amber-100 dark:bg-amber-900/30">
                    <svg className="w-6 h-6 text-amber-600 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                }
                trend="up"
                trendValue="5.7%"
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-100 dark:border-gray-700 rounded-2xl p-5 hover:shadow-lg transition-all duration-200 hover:-translate-y-1"
              />
            </div>

            {/* Main Chart */}
            <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Performance Over Time</h3>
                <div className="flex items-center space-x-2">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    Last 7 days
                  </span>
                </div>
              </div>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData.timeSeriesData}>
                    <defs>
                      <linearGradient id="viewsGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.8}/>
                        <stop offset="95%" stopColor="#3b82f6" stopOpacity={0.1}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" strokeOpacity={0.1} />
                    <XAxis 
                      dataKey="date" 
                      tick={{ fill: '#6b7280' }}
                      axisLine={{ stroke: 'transparent' }}
                      tickLine={false}
                    />
                    <YAxis 
                      tick={{ fill: '#6b7280' }}
                      axisLine={{ stroke: 'transparent' }}
                      tickLine={false}
                      width={40}
                    />
                    <Tooltip 
                      contentStyle={{
                        backgroundColor: 'rgba(17, 24, 39, 0.95)',
                        border: 'none',
                        borderRadius: '0.75rem',
                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
                        padding: '0.75rem 1rem',
                        color: 'white'
                      }}
                      itemStyle={{
                        color: 'white',
                        fontSize: '0.875rem',
                        padding: '0.25rem 0'
                      }}
                      labelStyle={{
                        color: '#9CA3AF',
                        fontSize: '0.75rem',
                        fontWeight: 500,
                        marginBottom: '0.5rem',
                        textTransform: 'uppercase',
                        letterSpacing: '0.05em'
                      }}
                    />
                    <Legend 
                      verticalAlign="top"
                      height={36}
                      iconType="circle"
                      iconSize={8}
                      wrapperStyle={{
                        paddingBottom: '1rem'
                      }}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="views" 
                      name="Views"
                      stroke="#3b82f6" 
                      strokeWidth={3}
                      dot={{
                        r: 4,
                        stroke: '#3b82f6',
                        strokeWidth: 2,
                        fill: '#ffffff',
                        fillOpacity: 1,
                        strokeOpacity: 1
                      }}
                      activeDot={{
                        r: 6, 
                        stroke: '#ffffff',
                        strokeWidth: 2,
                        fill: '#3b82f6'
                      }}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="likes" 
                      name="Likes"
                      stroke="#10b981" 
                      strokeWidth={3}
                      dot={{
                        r: 4,
                        stroke: '#10b981',
                        strokeWidth: 2,
                        fill: '#ffffff',
                        fillOpacity: 1,
                        strokeOpacity: 1
                      }}
                      activeDot={{
                        r: 6, 
                        stroke: '#ffffff',
                        strokeWidth: 2,
                        fill: '#10b981'
                      }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        );

      case 'audience':
        // Using the component-level deviceData
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Total Listeners</h3>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {podcastData?.statistics?.viewCount ? formatNumber(podcastData.statistics.viewCount) : 'N/A'}
                </p>
                <div className="mt-2">
                  <span className="inline-flex items-center text-sm font-medium text-green-600 dark:text-green-400">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                    </svg>
                    +12.5% from last month
                  </span>
                </div>
              </div>

              <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Avg. Listen Duration</h3>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {podcastData?.contentDetails?.duration ? formatDuration(podcastData.contentDetails.duration) : 'N/A'}
                </p>
                <div className="mt-2">
                  <span className="inline-flex items-center text-sm font-medium text-green-600 dark:text-green-400">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                    </svg>
                    +2.3% from last month
                  </span>
                </div>
              </div>

              <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Subscribers</h3>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {podcastData?.statistics?.subscriberCount ? formatNumber(podcastData.statistics.subscriberCount) : 'N/A'}
                </p>
                <div className="mt-2">
                  <span className="inline-flex items-center text-sm font-medium text-green-600 dark:text-green-400">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                    </svg>
                    +5.7% from last month
                  </span>
                </div>
              </div>

              <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Engagement Rate</h3>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {podcastData?.statistics?.likeCount && podcastData?.statistics?.viewCount 
                    ? `${((podcastData.statistics.likeCount / podcastData.statistics.viewCount) * 100).toFixed(1)}%` 
                    : 'N/A'}
                </p>
                <div className="mt-2">
                  <span className="inline-flex items-center text-sm font-medium text-green-600 dark:text-green-400">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                    </svg>
                    +1.2% from last month
                  </span>
                </div>
              </div>
            </div>

            <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Device Distribution</h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={deviceData}
                    margin={{
                      top: 5,
                      right: 30,
                      left: 20,
                      bottom: 5,
                    }}
                    barSize={40}
                  >
                    <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#E5E7EB" />
                    <XAxis 
                      dataKey="name" 
                      axisLine={false}
                      tickLine={false}
                      tick={{ fill: '#6B7280' }}
                    />
                    <YAxis 
                      axisLine={false}
                      tickLine={false}
                      tick={{ fill: '#6B7280' }}
                    />
                    <Tooltip 
                      contentStyle={{
                        backgroundColor: 'rgba(17, 24, 39, 0.95)',
                        border: 'none',
                        borderRadius: '0.5rem',
                        padding: '0.5rem 0.75rem',
                        fontSize: '0.875rem',
                      }}
                      itemStyle={{ color: 'white', padding: '0.25rem 0' }}
                      formatter={(value) => [`${value} users`, '']}
                    />
                    <Bar 
                      dataKey="value" 
                      name="Users"
                      radius={[4, 4, 0, 0]}
                    >
                      {deviceData.map((entry, index) => (
                        <Cell 
                          key={`device-cell-${index}`} 
                          fill={COLORS[index % COLORS.length]}
                          stroke="#1E293B"
                          strokeWidth={1}
                        />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700 hover:shadow-2xl transition-shadow duration-300">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Platform Distribution</h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={platformData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        innerRadius={40}
                        paddingAngle={5}
                        dataKey="value"
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}
                      >
                        {platformData.map((entry, index) => (
                          <Cell 
                            key={`platform-cell-${index}`} 
                            fill={COLORS[(index + 2) % COLORS.length]}
                            stroke="#1E293B"
                            strokeWidth={1}
                          />
                        ))}
                      </Pie>
                      <Tooltip 
                        formatter={(value) => [value.toLocaleString(), 'Views']}
                        contentStyle={{
                          backgroundColor: 'rgba(17, 24, 39, 0.9)',
                          borderColor: '#374151',
                          borderRadius: '0.5rem',
                          color: 'white'
                        }}
                      />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
        );
        
      case 'summary':
        return (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4">Podcast Summary</h3>
              {summary ? (
                <div className="prose dark:prose-invert max-w-none">
                  <p>{summary}</p>
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-gray-500 dark:text-gray-400 mb-4">No summary generated yet</p>
                  <button
                    onClick={handleGenerateSummary}
                    disabled={generatingSummary}
                    className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition-colors disabled:opacity-50"
                  >
                    {generatingSummary ? 'Generating...' : 'Generate Summary'}
                  </button>
                </div>
              )}
            </div>
            
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4">Related Videos</h3>
              <div className="space-y-4">
                {relatedVideos.length > 0 ? (
                  relatedVideos.map((video, index) => (
                    <div key={index} className="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                      <h4 className="font-medium">{video.title}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-300">{video.reason}</p>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-500 dark:text-gray-400">No related videos available</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        );
        
      default:
        return null;
    }
  };

  return (
    <div className="min-h-160 bg-black p-4 md:p-6">
      <div className="max-w-7xl mx-auto">
        <header className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 p-6 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700">
            <div>
              <h1 className="text-2xl md:text-3xl font-bold text-white">
                Podcast Analytics
              </h1>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                Track and analyze your podcast performance
              </p>
            </div>
            <div className="flex flex-col sm:flex-row items-stretch gap-3 w-full md:w-100">
              <div className="relative flex-1">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg
                    className="h-5 w-5 text-gray-400"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                <input
                  type="text"
                  placeholder="Paste YouTube URL here..."
                  value={podcastId}
                  onChange={(e) => setPodcastId(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-800/80 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 shadow-sm hover:shadow-md"
                />
              </div>
              <button
                onClick={handleSubmit}
                disabled={!podcastId || loading}
                className={`px-6 py-3 rounded-xl font-medium text-white transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center justify-center gap-2 ${
                  !podcastId || loading
                    ? 'bg-gray-400 dark:bg-gray-600 cursor-not-allowed'
                    : 'bg-purple-600/30 hover:bg-purple-600/60 shadow-lg hover:shadow-xl'
                }`}
              >
                {loading ? (
                  <>
                    <svg
                      className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Analyzing...
                  </>
                ) : (
                  <>
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                      />
                    </svg>
                    Analyze
                  </>
                )}
              </button>
            </div>
          </div>
        </header>
        {error && (
          <div className="mb-6 p-4 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-300 rounded-md">
            {error}
          </div>
        )}
        {podcastData && (
          <>
            <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl overflow-hidden border border-gray-100 dark:border-gray-700">
              <div className="px-6 pt-4">
                <nav className="flex space-x-2">
                  {tabs.map((tab) => (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`px-5 py-2.5 rounded-t-lg text-sm font-medium transition-all duration-200 ${
                        activeTab === tab.id
                          ? 'bg-white dark:bg-gray-900 text-blue-600 dark:text-blue-400 shadow-md border-t-2 border-l-2 border-r-2 border-blue-500 dark:border-blue-400'
                          : 'text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700/50 hover:text-gray-700 dark:hover:text-gray-300'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        {tab.icon && <span className="text-lg">{tab.icon}</span>}
                        <span>{tab.label}</span>
                      </div>
                    </button>
                  ))}
                </nav>
              </div>
              <div className="p-6 bg-white dark:bg-gray-900 rounded-b-xl rounded-tr-xl shadow-inner border-t border-gray-100 dark:border-gray-700">
                <div className="animate-fade-in">{renderTabContent()}</div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
